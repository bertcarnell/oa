require(stringr)
str(X)
ind <- grep("/* Assign values for vectors with p=2 */", X)
ind
ind <- grep("[/][*] Assign values for vectors with p=2 [*][/]", X)
ind
ind_begin <- grep("[/][*] Assign values for vectors with p=2 [*][/]", X)
ind_end <- grep("GF_fields_are_set = 1;", X)
ind_begin
ind_end
ind_end <- grep("xtnpt1[0] = 0; [/][*] Not used [*][/]", X)
ind_end
ind_end <- grep("xtnpt1[[]0[]] = 0; [/][*] Not used [*][/]", X)
ind_end
X <- X[ind_begin, ind_end]
X <- X[ind_begin:ind_end]
X
X <- X[ind_begin:ind_end] %>%
stringr::str_remove_all("[/][*].*[*][/]")
X
X <- X[ind_begin:ind_end]
X
X <- readLines(filename)
ind_begin <- grep("[/][*] Assign values for vectors with p=2 [*][/]", X)
ind_end <- grep("xtnpt1[[]0[]] = 0; [/][*] Not used [*][/]", X)
X <- X[ind_begin:ind_end]
X
X <- X[ind_begin:ind_end] %>%
stringr::str_remove("X")
X
?str_remove
X <- readLines(filename)
ind_begin <- grep("[/][*] Assign values for vectors with p=2 [*][/]", X)
ind_end <- grep("xtnpt1[[]0[]] = 0; [/][*] Not used [*][/]", X)
Y <- X[ind_begin:ind_end] %>%
stringr::str_remove("X")
Y
Y <- X[ind_begin:ind_end] %>%
stringr::str_remove("X") %>%
stringr::str_remove("[/][*].*[*][/]")
Y
Y[1:10]
q <- list(list(p=2, n=2:9),
list(p=3, n=2:6),
list(p=5, n=2:6),
list(p=7, n=2:5),
list(p=11, n=2),
list(p=13, n=2))
lapply(q, function(x)
{
p = x$p
n = x$n
return(paste0("xtn", p, "t", n))
})
temp <- lapply(q, function(x)
{
p = x$p
n = x$n
return(paste0("xtn", p, "t", n))
})
lapply(temp, function(x)
{
sapply(x, function(z) grep(z, Y))
})
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
}
}
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
print(Y[locations[[i]][j]])
}
}
locations <- lapply(temp, function(x)
{
sapply(x, function(z) grep(z, Y))
})
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
print(Y[locations[[i]][j]])
}
}
locations
locations <- lapply(temp, function(x)
{
sapply(x, function(z) c(grep(z, Y)))
})
locations
locations <- lapply(temp, function(x)
{
sapply(x, function(z) unlist(grep(z, Y)))
})
locations
locations[[5]]
c(locations[[5]])
locations <- lapply(temp, function(x)
{
c(sapply(x, function(z) grep(z, Y)))
})
locations
for (i in seq_along(q))
{
p <- q[[i]]$p
print(locations[[i]])
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
}
}
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
print(locations[[i]][j])
}
}
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
print(Y[c(locations[[i]][j])])
}
}
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
print(Y[unlist(locations[[i]][j])])
}
}
Y <- X[ind_begin:ind_end] %>%
stringr::str_remove("X") %>%
stringr::str_remove("[/][*].*[*][/]") %>%
stringr::str_remove(";")
Y
q <- list(list(p=2, n=2:9),
list(p=3, n=2:6),
list(p=5, n=2:6),
list(p=7, n=2:5),
list(p=11, n=2),
list(p=13, n=2))
temp <- lapply(q, function(x)
{
p = x$p
n = x$n
return(paste0("xtn", p, "t", n))
})
locations <- lapply(temp, function(x)
{
c(sapply(x, function(z) grep(z, Y)))
})
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
#print(Y[unlist(locations[[i]][j])])
Z <- Y[unlist(locations[[i]][j])]
test <- strsplit(Z, split = " = ")
}
}
test
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
#print(Y[unlist(locations[[i]][j])])
Z <- Y[unlist(locations[[i]][j])]
sapply(Z, function(x) unlist(strsplit(x, split = " = "))[2])
}
}
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
#print(Y[unlist(locations[[i]][j])])
Z <- Y[unlist(locations[[i]][j])]
print(sapply(Z, function(x) unlist(strsplit(x, split = " = "))[2]))
}
}
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
print(temp[[i]][j])
#print(Y[unlist(locations[[i]][j])])
Z <- Y[unlist(locations[[i]][j])]
print(sapply(Z, function(x) trimws(unlist(strsplit(x, split = " = "))[2])))
}
}
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
#print(temp[[i]][j])
#print(Y[unlist(locations[[i]][j])])
n <- q[[i]]$n[j]
Z <- Y[unlist(locations[[i]][j])]
W <- sapply(Z, function(x) trimws(unlist(strsplit(x, split = " = "))[2]))
paste0("if (q == primes::ipow(", p, ",", n, ")) xtn = std::vector({", paste0(W, collapse=", "), "});")
}
}
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
#print(temp[[i]][j])
#print(Y[unlist(locations[[i]][j])])
n <- q[[i]]$n[j]
Z <- Y[unlist(locations[[i]][j])]
W <- sapply(Z, function(x) trimws(unlist(strsplit(x, split = " = "))[2]))
print(
paste0("if (q == primes::ipow(", p, ",", n, ")) xtn = std::vector({", paste0(W, collapse=", "), "});")
)
}
}
q <- list(list(p=2, n=2:29),
list(p=3, n=2:18),
list(p=5, n=2:12),
list(p=7, n=2:10),
list(p=11, n=2:8),
list(p=13, n=2:8),
list(p=17, n=2:7),
list(p=19, n=2:7),
list(p=23, n=2:6),
list(p=29, n=2:6),
list(p=31, n=2:6),
list(p=37, n=2:5),
list(p=41, n=2:5),
list(p=43, n=2:5),
list(p=47, n=2:5)
)
temp <- lapply(q, function(x)
{
p = x$p
n = x$n
return(paste0("xtn", p, "t", n))
})
locations <- lapply(temp, function(x)
{
c(sapply(x, function(z) grep(z, Y)))
})
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
#print(temp[[i]][j])
#print(Y[unlist(locations[[i]][j])])
n <- q[[i]]$n[j]
Z <- Y[unlist(locations[[i]][j])]
W <- sapply(Z, function(x) trimws(unlist(strsplit(x, split = " = "))[2]))
print(
paste0("if (q == primes::ipow(", p, ",", n, ")) xtn = std::vector({", paste0(W, collapse=", "), "});")
)
}
}
ind_begin <- grep("[/][*] GF( 2 ^ 2 ) = GF( 4 ) [*][/]", X)
ind_begin
ind_begin <- grep("[/][*] GF( 2 [^] 2 ) = GF( 4 ) [*][/]", X)
ind_begin <- grep("[/][*] GF( 2 [\^] 2 ) = GF( 4 ) [*][/]", X)
X <- readLines(filename)
ind_begin <- 6074 # grep("[/][*] GF( 2 ^ 2 ) = GF( 4 ) [*][/]", X)
ind_end <- 7414 # grep("xtnpt1[[]0[]] = 0; [/][*] Not used [*][/]", X)
X[ind_begin:ind_end]
Y <- X[ind_begin:ind_end] %>%
stringr::str_remove("X") %>%
stringr::str_remove("[/][*].*[*][/]") %>%
stringr::str_remove(";") %>%
stringr::str_remove(".*ivector.*")
Y
q <- list(list(p=2, n=2:29),
list(p=3, n=2:18),
list(p=5, n=2:12),
list(p=7, n=2:10),
list(p=11, n=2:8),
list(p=13, n=2:8),
list(p=17, n=2:7),
list(p=19, n=2:7),
list(p=23, n=2:6),
list(p=29, n=2:6),
list(p=31, n=2:6),
list(p=37, n=2:5),
list(p=41, n=2:5),
list(p=43, n=2:5),
list(p=47, n=2:5)
)
temp <- lapply(q, function(x)
{
p = x$p
n = x$n
return(paste0("xtn", p, "t", n))
})
locations <- lapply(temp, function(x)
{
c(sapply(x, function(z) grep(z, Y)))
})
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
#print(temp[[i]][j])
#print(Y[unlist(locations[[i]][j])])
n <- q[[i]]$n[j]
Z <- Y[unlist(locations[[i]][j])]
W <- sapply(Z, function(x) trimws(unlist(strsplit(x, split = " = "))[2]))
print(
paste0("if (q == primes::ipow(", p, ",", n, ")) xtn = std::vector({", paste0(W, collapse=", "), "});")
)
}
}
paste0("std::vector<int> xtn;")
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
#print(temp[[i]][j])
#print(Y[unlist(locations[[i]][j])])
n <- q[[i]]$n[j]
Z <- Y[unlist(locations[[i]][j])]
W <- sapply(Z, function(x) trimws(unlist(strsplit(x, split = " = "))[2]))
stopifnot(length(W) == n)
print(
paste0(ifelse(i==1 & j == 1, "if", "else if"), " (q == primes::ipow(", p, ",", n, ")) xtn = {", paste0(W, collapse=", "), "};")
)
}
}
W
temp <- lapply(q, function(x)
{
p = x$p
n = x$n
return(paste0("xtn", p, "t", n, "[[]"))
})
locations <- lapply(temp, function(x)
{
c(sapply(x, function(z) grep(z, Y)))
})
paste0("std::vector<int> xtn;")
for (i in seq_along(q))
{
p <- q[[i]]$p
for (j in seq_along(q[[i]]$n))
{
#print(temp[[i]][j])
#print(Y[unlist(locations[[i]][j])])
n <- q[[i]]$n[j]
Z <- Y[unlist(locations[[i]][j])]
W <- sapply(Z, function(x) trimws(unlist(strsplit(x, split = " = "))[2]))
stopifnot(length(W) == n)
print(
paste0(ifelse(i==1 & j == 1, "if", "else if"), " (q == primes::ipow(", p, ",", n, ")) xtn = {", paste0(W, collapse=", "), "};")
)
}
}
W
paste(W, c(1, rep("x", length(W)-1)))
paste(W, c("", rep("x", length(W)-1)))
paste(W, c("", rep("x^", length(W)-1)))
paste(paste(W, c("", rep("x^", length(W)-1))), collapse="+")
paste(paste(W, c("", rep("x^", length(W)-1))), collapse=" + ")
paste(paste(W, c("", paste0(rep("x^", length(W)-1), 1:(length(W)-1)))), collapse=" + ")
source('C:/repositories/oa/etc/CodingUtilities/CreatePowerCycle.R')
source('C:/repositories/oa/etc/CodingUtilities/CreatePowerCycle.R')
makePolynomial <- function(n, W)
{
term1 <- "x^n = "
term2 <- NULL
for (i in 1:length(W))
{
if (i == 1)
{
term <- c(term, W[i])
} else if (W[i] == 1)
{
term <- c(term, paste0(W[i], "x"))
} else if (W[i] != 0)
{
term <- c(term, paste0(W[i], "x^", i - 1))
}
return(term)
}
}
makePolynomial(10, c(1,2,3,0,0,4,5,0,0,0))
makePolynomial <- function(n, W)
{
term1 <- "x^n = "
term2 <- NULL
for (i in 1:length(W))
{
if (i == 1)
{
term2 <- c(term2, W[i])
} else if (W[i] == 1)
{
term2 <- c(term2, paste0(W[i], "x"))
} else if (W[i] != 0)
{
term2 <- c(term2, paste0(W[i], "x^", i - 1))
}
return(paste0(term1, paste0(term2, collapse = " + ")))
}
}
makePolynomial(10, c(1,2,3,0,0,4,5,0,0,0))
makePolynomial <- function(n, W)
{
term1 <- paste0("x^", n, " = ")
for (i in 1:length(W))
{
if (i == 1)
{
term2 <- W[i]
} else if (W[i] == 1)
{
term2 <- c(term2, paste0(W[i], "x"))
} else if (W[i] != 0)
{
term2 <- c(term2, paste0(W[i], "x^", i - 1))
}
return(paste0(term1, paste0(term2, collapse = " + ")))
}
}
makePolynomial(10, c(1,2,3,0,0,4,5,0,0,0))
makePolynomial <- function(n, W)
{
term1 <- paste0("x^", n, " = ")
for (i in 1:length(W))
{
if (i == 1)
{
term2 <- W[i]
} else if (W[i] == 1)
{
term2 <- c(term2, paste0(W[i], "x"))
} else if (W[i] != 0)
{
term2 <- c(term2, paste0(W[i], "x^", i - 1))
}
}
return(paste0(term1, paste0(term2, collapse = " + ")))
}
makePolynomial(10, c(1,2,3,0,0,4,5,0,0,0))
source('C:/repositories/oa/etc/CodingUtilities/CreatePowerCycle.R')
makePolynomial <- function(n, W)
{
term1 <- paste0("x^", n, " = ")
for (i in 1:length(W))
{
if (i == 1)
{
term2 <- W[i]
} else if (i == 2)
{
term2 <- c(term2, paste0(W[i], "x"))
} else if (W[i] != 0)
{
term2 <- c(term2, paste0(W[i], "x^", i - 1))
}
}
return(paste0(term1, paste0(term2, collapse = " + ")))
}
makePolynomial(10, c(1,2,3,0,0,4,5,1,0,0))
makePolynomial <- function(n, W)
{
term1 <- paste0("x^", n, " = ")
for (i in 1:length(W))
{
if (i == 1)
{
term2 <- W[i]
} else if (i == 2)
{
term2 <- c(term2, paste0(ifelse(W[i] == 1, "", W[i]), "x"))
} else if (W[i] != 0)
{
term2 <- c(term2, paste0(ifelse(W[i] == 1, "", W[i]), "x^", i - 1))
}
}
return(paste0(term1, paste0(term2, collapse = " + ")))
}
makePolynomial(10, c(1,2,3,0,0,4,5,1,0,0))
source('C:/repositories/oa/etc/CodingUtilities/CreatePowerCycle.R')
source('C:/repositories/oa/etc/CodingUtilities/CreatePowerCycle.R')
source('C:/repositories/oa/etc/CodingUtilities/CreatePowerCycle.R')
